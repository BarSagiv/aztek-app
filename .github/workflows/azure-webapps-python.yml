# # # This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
# # #
# # # This workflow assumes you have already created the target Azure App Service web app.
# # # For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
# # #
# # # To configure this workflow:
# # #
# # # 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
# # #    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
# # #
# # # 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
# # #    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
# # #
# # # 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
# # #
# # # For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# # # For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# # # For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples
# # #
# # name: Build and deploy Python app to Azure Web App

# # env:
# #   AZURE_WEBAPP_NAME: your-app-name  # set this to the name of your Azure Web App
# #   PYTHON_VERSION: '3.11'              # set this to the Python version to use

# # on:
# #   push:
# #     branches: [ "main" ]
# #   workflow_dispatch:

# # permissions:
# #   contents: read

# # jobs:
# #   build:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - uses: actions/checkout@v4

# #       - name: Set up Python version
# #         uses: actions/setup-python@v3.0.0
# #         with:
# #           python-version: ${{ env.PYTHON_VERSION }}
# #           cache: 'pip'

# #       - name: Create and start virtual environment
# #         run: |
# #           python -m venv venv
# #           source venv/bin/activate

# #       - name: Install dependencies
# #         run: pip install -r requirements.txt

# #       # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

# #       - name: Upload artifact for deployment jobs
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: python-app
# #           path: |
# #             .
# #             !venv/

# #   deploy:
# #     permissions:
# #       contents: none
# #     runs-on: ubuntu-latest
# #     needs: build
# #     environment:
# #       name: 'Development'
# #       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

# #     steps:
# #       - name: Download artifact from build job
# #         uses: actions/download-artifact@v4
# #         with:
# #           name: python-app
# #           path: .

# #       - name: 'Deploy to Azure Web App'
# #         id: deploy-to-webapp
# #         uses: azure/webapps-deploy@v2
# #         with:
# #           app-name: ${{ env.AZURE_WEBAPP_NAME }}
# #           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

# name: Deploy to Azure

# env:
#    AZURE_WEBAPP_NAME: your-app-name  # set this to the name of your Azure Web App
#    PYTHON_VERSION: '3.11'              # set this to the Python version to use

# on:
#   push:
#     branches: [ "main" ]

# permissions:
#   id-token: write   # REQUIRED for OIDC
#   contents: read

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
      
#       - name: Set up Python version
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}
#           cache: 'pip'

#       - name: Create and start virtual environment
#         run: |
#           python -m venv venv
#           source venv/bin/activate

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

#       - name: Upload artifact for deployment jobs
#         uses: actions/upload-artifact@v4
#         with:
#           name: python-app
#           path: |
#             ./weather-app
#             !venv/


#       # Log in to Azure via OIDC
#       - name: Azure login (OIDC)
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}      # set in repo/org Variables
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}      # set in repo/org Variables
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # set in Variables

#       # Example: Azure CLI usage after login
#       - name: Show current account
#         run: az account show

#       # … your deploy steps (az, bicep, terraform, azure/webapps-deploy, etc.) …
#       # deplo

name: Deploy Flask App to Azure

env:
  AZURE_WEBAPP_NAME: flask-weather-app  # replace with your Azure Web App name
  PYTHON_VERSION: '3.11'
  RESOURCE_GROUP: flask-app-rg          # replace with your Azure resource group name

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2️⃣ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # 3️⃣ Install dependencies (including gunicorn)
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install gunicorn

      # 4️⃣ Login to Azure via OIDC
      - name: Login to Azure via OIDC
        uses: azure/login@v2
        id: azure_oidc
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      # 4️⃣a Test OIDC token (optional)
      - name: Test OIDC token
        run: echo "${{ steps.azure_oidc.outputs.token }}"

      # 5️⃣ Configure startup command for Flask
      - name: Set startup command
        run: |
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --startup-file "gunicorn --bind 0.0.0.0:8000 app:app"

      # 6️⃣ Deploy Flask app to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: .
          slot-name: 'Production'
